package com.wd.tech.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wd.tech.bean.LoginUserInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_USER_INFO_BEAN".
*/
public class LoginUserInfoBeanDao extends AbstractDao<LoginUserInfoBean, Long> {

    public static final String TABLENAME = "LOGIN_USER_INFO_BEAN";

    /**
     * Properties of entity LoginUserInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Gid = new Property(0, long.class, "gid", true, "_id");
        public final static Property NickName = new Property(1, String.class, "nickName", false, "NICK_NAME");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property Pwd = new Property(3, String.class, "pwd", false, "PWD");
        public final static Property SessionId = new Property(4, String.class, "sessionId", false, "SESSION_ID");
        public final static Property UserId = new Property(5, int.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(6, String.class, "userName", false, "USER_NAME");
        public final static Property WhetherVip = new Property(7, int.class, "whetherVip", false, "WHETHER_VIP");
        public final static Property WhetherFaceId = new Property(8, int.class, "whetherFaceId", false, "WHETHER_FACE_ID");
        public final static Property Statu = new Property(9, int.class, "statu", false, "STATU");
    }


    public LoginUserInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LoginUserInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_USER_INFO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: gid
                "\"NICK_NAME\" TEXT," + // 1: nickName
                "\"PHONE\" TEXT," + // 2: phone
                "\"PWD\" TEXT," + // 3: pwd
                "\"SESSION_ID\" TEXT," + // 4: sessionId
                "\"USER_ID\" INTEGER NOT NULL ," + // 5: userId
                "\"USER_NAME\" TEXT," + // 6: userName
                "\"WHETHER_VIP\" INTEGER NOT NULL ," + // 7: whetherVip
                "\"WHETHER_FACE_ID\" INTEGER NOT NULL ," + // 8: whetherFaceId
                "\"STATU\" INTEGER NOT NULL );"); // 9: statu
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_USER_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginUserInfoBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGid());
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(4, pwd);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(5, sessionId);
        }
        stmt.bindLong(6, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(7, userName);
        }
        stmt.bindLong(8, entity.getWhetherVip());
        stmt.bindLong(9, entity.getWhetherFaceId());
        stmt.bindLong(10, entity.getStatu());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginUserInfoBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGid());
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(4, pwd);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(5, sessionId);
        }
        stmt.bindLong(6, entity.getUserId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(7, userName);
        }
        stmt.bindLong(8, entity.getWhetherVip());
        stmt.bindLong(9, entity.getWhetherFaceId());
        stmt.bindLong(10, entity.getStatu());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public LoginUserInfoBean readEntity(Cursor cursor, int offset) {
        LoginUserInfoBean entity = new LoginUserInfoBean( //
            cursor.getLong(offset + 0), // gid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pwd
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sessionId
            cursor.getInt(offset + 5), // userId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userName
            cursor.getInt(offset + 7), // whetherVip
            cursor.getInt(offset + 8), // whetherFaceId
            cursor.getInt(offset + 9) // statu
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginUserInfoBean entity, int offset) {
        entity.setGid(cursor.getLong(offset + 0));
        entity.setNickName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPwd(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSessionId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserId(cursor.getInt(offset + 5));
        entity.setUserName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWhetherVip(cursor.getInt(offset + 7));
        entity.setWhetherFaceId(cursor.getInt(offset + 8));
        entity.setStatu(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LoginUserInfoBean entity, long rowId) {
        entity.setGid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LoginUserInfoBean entity) {
        if(entity != null) {
            return entity.getGid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LoginUserInfoBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
